import os
import random
import pygame
import tkinter as tk
from tkinter import filedialog
from pydub import AudioSegment
import shutil
import zipfile
import uuid

# Variable to store the temporary directory path
temp_dir = "TEMP"

# Function to create a random composition from layers
def generate_random_composition():
    global temp_dir
    gae_file_path = gae_file_entry.get()

    # Ensure the temporary directory exists or create it
    if not os.path.exists(temp_dir):
        os.makedirs(temp_dir)

    # Extract the contents of the .gae file into the temporary directory
    with zipfile.ZipFile(gae_file_path, 'r') as gae_zip:
        gae_zip.extractall(temp_dir)

    # Get a list of folders in the temporary directory, each folder represents a layer
    layer_folders = [os.path.join(temp_dir, name) for name in os.listdir(temp_dir) if os.path.isdir(os.path.join(temp_dir, name))]

    if not layer_folders:
        print("No layers found in the .gae file.")
        return

    # Create empty layers for the composition
    layers = [AudioSegment.silent(duration=0) for _ in range(len(layer_folders))]

    for i, layer_folder in enumerate(layer_folders):
        # Get a list of WAV files in each layer folder
        wav_files = [f for f in os.listdir(layer_folder) if f.endswith(".wav")]
        if not wav_files:
            print(f"No WAV files found in layer {i + 1}. Skipping this layer.")
            continue

        # Shuffle the list of WAV files to create a random arrangement for each layer
        random.shuffle(wav_files)

        # Append each WAV file to the corresponding layer
        for wav_file in wav_files:
            audio = AudioSegment.from_wav(os.path.join(layer_folder, wav_file))
            layers[i] += audio

    # Overlay all layers to create the composition
    composition = layers[0]
    for layer in layers[1:]:
        composition = composition.overlay(layer)

    # Generate a unique ID for the filename
    unique_id = uuid.uuid4().hex

    # Save the resulting composition as a temporary WAV file with a unique name
    composition.export(f"RandomComposition_{unique_id}.wav", format="wav")

    # Initialize pygame mixer and play the composition
    pygame.mixer.init()
    pygame.mixer.music.set_volume(0.5)
    pygame.mixer.music.load(f"RandomComposition_{unique_id}.wav")
    pygame.mixer.music.play()
    print("Playing composition...")

# Function to stop the currently playing composition and clean up the temporary directory
def stop_composition():
    pygame.mixer.music.stop()
    if os.path.exists(temp_dir):
        shutil.rmtree(temp_dir)
    print("Composition stopped and temporary files deleted.")

# Create the main application window
app = tk.Tk()
app.title("Random Composition Generator")

# Create and place input fields, labels, and buttons
gae_file_label = tk.Label(app, text="Select a .gae file:")
gae_file_label.pack()
gae_file_entry = tk.Entry(app)
gae_file_entry.pack()

browse_button = tk.Button(app, text="Browse", command=lambda: gae_file_entry.insert(0, filedialog.askopenfilename(filetypes=[("GAE files", "*.gae")])))
browse_button.pack()

generate_button = tk.Button(app, text="Generate Random Composition", command=generate_random_composition)
generate_button.pack()

stop_button = tk.Button(app, text="Stop Composition", command=stop_composition)
stop_button.pack()

app.mainloop()
